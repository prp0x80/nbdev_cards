[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "A deck of cards demo of nbdev basd on ideas from Think Python 2nd Edition by Allen B. Downey"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\nInstall using:\npip install nbdev_cards\nor:\nconda install -c fastai nbdev-cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class you can use to create, display, and compare playing cards:\n\nCard(suit=1, rank=3)\n\n(3, diamonds)\n\n\nSuits are numbered according to the list:\n\nsuits\n\n['clubs', 'diamonds', 'spade', 'hearts']\n\n\nAnother class this lib provides is Deck\n\nDeck()\n\n(A, clubs); (2, clubs); (3, clubs); (4, clubs); (5, clubs); (6, clubs); (7, clubs); (8, clubs); (9, clubs); (10, clubs); (J, clubs); (Q, clubs); (K, clubs); (A, diamonds); (2, diamonds); (3, diamonds); (4, diamonds); (5, diamonds); (6, diamonds); (7, diamonds); (8, diamonds); (9, diamonds); (10, diamonds); (J, diamonds); (Q, diamonds); (K, diamonds); (A, spades); (2, spades); (3, spades); (4, spades); (5, spades); (6, spades); (7, spades); (8, spades); (9, spades); (10, spades); (J, spades); (Q, spades); (K, spades); (A, hearts); (2, hearts); (3, hearts); (4, hearts); (5, hearts); (6, hearts); (7, hearts); (8, hearts); (9, hearts); (10, hearts); (J, hearts); (Q, hearts); (K, hearts)"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\nWhen we initially create a deck, all of the cards will be present:\n\ndeck = Deck()\ndeck\n\n(A, clubs); (2, clubs); (3, clubs); (4, clubs); (5, clubs); (6, clubs); (7, clubs); (8, clubs); (9, clubs); (10, clubs); (J, clubs); (Q, clubs); (K, clubs); (A, diamonds); (2, diamonds); (3, diamonds); (4, diamonds); (5, diamonds); (6, diamonds); (7, diamonds); (8, diamonds); (9, diamonds); (10, diamonds); (J, diamonds); (Q, diamonds); (K, diamonds); (A, spades); (2, spades); (3, spades); (4, spades); (5, spades); (6, spades); (7, spades); (8, spades); (9, spades); (10, spades); (J, spades); (Q, spades); (K, spades); (A, hearts); (2, hearts); (3, hearts); (4, hearts); (5, hearts); (6, hearts); (7, hearts); (8, hearts); (9, hearts); (10, hearts); (J, hearts); (Q, hearts); (K, hearts)\n\n\nThat should be 52 cards.\n\ntest_eq(len(deck), 52)\n\nAs a reminder, there are the suits we deifned for a Card:\n\nsuits\n\n['clubs', 'diamonds', 'spades', 'hearts']\n\n\nWe can check if, say, the Ace of Clubs is in the deck:\n\nCard(1, 1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3, 13)) # (K, hearts)\n\nThere are 51 cards in the deck now\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemove card from the deck or raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ncard23 = Card(2, 3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffles the card in this deck\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement if replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\n\ndraw_n(13, replace=False)\n\n[(K, clubs),\n (6, hearts),\n (9, hearts),\n (2, clubs),\n (6, diamonds),\n (3, hearts),\n (5, hearts),\n (10, clubs),\n (Q, spades),\n (2, diamonds),\n (K, diamonds),\n (7, clubs),\n (8, clubs)]"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card - A basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing cards suits and ranks. These are the suits:\nFor instance, the suit at index 0\nThese are the ranks\nFor instance the rank at index 1 (Note there isn’t a playing card at position 0, since we want the ranks to match the indices where possible)\nsource"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card - A basic playing card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than, and greater than work on the rank and suit indices\nFor instance, here’s a test of equality …\n\ntest_eq(Card(rank=1, suit=3), Card(rank=1, suit=3))\ntest_ne(Card(rank=2, suit=3), Card(rank=1, suit=3))\ntest_ne(Card(rank=1, suit=3), Card(rank=2, suit=3))\n\n… and a test of < …\n\nassert Card(suit=1, rank=2) < Card(suit=2, rank=3)\n\n…and finally test of > …\n\nassert Card(suit=3, rank=3) > Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3) > Card(suit=2, rank=3)"
  }
]